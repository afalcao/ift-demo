/*
  Copyright (C) <2003> <Alexandre Xavier Falcão>
  Copyright (C) <2012> <Cris Luengo>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  please see full copyright in COPYING file.
  -------------------------------------------------------------------------
  written by Cris Luengo <cris@cb.uu.se>, August 22, 2012
  based on code by A.X. Falcão <afalcao@ic.unicamp.br>, May 13th 2007

  This program is a collection of functions to create, destroy, and
  manipulate a priority queue. This particular priority queue is not
  stable.

  A priority queue Q consists of two data structures: a circular
  queue C and a table H that encodes all possible heaps.

  Q requires that the maximum possible increment along the paths be a
  non-negative value less than the number of buckets in C.

  Q->C.first[i] gives the first element of heap i.
  Q->C.last[i]  gives the last  element of heap i.
  Q->C.nbuckets gives the number of buckets in C.
  Q->C.minvalue gives the minimum value of a node in queue.
  Q->C.maxvalue gives the maximum value of a node in queue.
  Q->C.removal_policy gives the MINVALUE or MAXVALUE removal policy

  All possible heaps are represented in H. Each bucket i contains a heap
  for the priority values >=i and <i+1.

  Q->H.elem[i].parent: the parent element of i
  Q->H.elem[i].left:   the left child of i
  Q->H.elem[i].right:  the right child of i
  Q->H.elem[i].color:  the color of i (WHITE=never inserted, GRAY=inserted,
  BLACK=removed)
  Q->H.nelems: gives the total number of elements that can be
  inserted in Q (It is usually the number of pixels in a given image
  or the number of nodes in a graph)
  Q->H.value[i]: gives the priority of element i in the graph.

  Insertions and updates are done in O(log(N/K)), where K is the number
  of buckets.
  Removal may take O(K+log(N/K))
*/

#include "rgqueue.h"

RGQueue *CreateRGQueue(int nbuckets, int nelems, float *value)
{
    RGQueue *Q=NULL;

    Q = (RGQueue *) malloc(1*sizeof(RGQueue));
    if (Q == NULL)
        Error(MSG1,"CreateRGQueue");

    Q->C.first    = (int *)malloc((nbuckets) * sizeof(int));
    Q->C.last     = (int *)malloc((nbuckets) * sizeof(int));
    if ( (Q->C.first == NULL) || (Q->C.last == NULL) )
        Error(MSG1,"CreateRGQueue");
    Q->C.nbuckets = nbuckets;

    Q->H.elem   = (RGQNode *)malloc(nelems*sizeof(RGQNode));
    if (Q->H.elem == NULL)
        Error(MSG1,"CreateRGQueue");
    Q->H.nelems = nelems;
    Q->H.value  = value;

    ResetRGQueue(Q);

    return(Q);
}

void ResetRGQueue(RGQueue *Q)
{
    int i;

    Q->C.minvalue = INT_MAX;
    Q->C.maxvalue = INT_MIN;
    SetRemovalPolicy(Q,MINVALUE);

    for (i=0; i < Q->C.nbuckets; i++)
    {
        Q->C.first[i]=NIL;
        Q->C.last[i] =NIL;
    }
    for (i=0; i < Q->H.nelems; i++)
    {
        Q->H.elem[i].parent = Q->H.elem[i].left = Q->H.elem[i].right = NIL;
        Q->H.elem[i].color  = WHITE;
    }

}

void DestroyRGQueue(RGQueue **Q)
{
    RGQueue *aux;

    aux = *Q;
    if (aux != NULL)
    {
        if (aux->C.first    != NULL) free(aux->C.first);
        if (aux->C.last     != NULL) free(aux->C.last);
        if (aux->H.elem     != NULL) free(aux->H.elem);
        free(aux);
        *Q = NULL;
    }
}

void SwapParentChildInHeap(RGQueue *Q, int bucket, int parent, int child)
{
  int parent_parent, child_left, child_right, parent_left, parent_right;

  /* Keep circular queue updated */

  if (Q->C.first[bucket] == parent)
    Q->C.first[bucket] = child;

  if (Q->C.last[bucket] == child)
    Q->C.last[bucket] = parent;

  /* Fix pointers of the adjacent nodes first */

  parent_parent = Q->H.elem[parent].parent;
  child_left    = Q->H.elem[child].left;
  child_right   = Q->H.elem[child].right;

  if (parent_parent != NIL) { 
    if (Q->H.elem[parent_parent].left == parent)
      Q->H.elem[parent_parent].left  = child;
    else
      Q->H.elem[parent_parent].right = child;
  }

  if (child_left != NIL) 
    Q->H.elem[child_left].parent  = parent;

  if (child_right != NIL) 
    Q->H.elem[child_right].parent = parent;
    
  /* Swap elements */

  parent_left  = Q->H.elem[parent].left;
  parent_right = Q->H.elem[parent].right;

  Q->H.elem[parent].parent = child;
  Q->H.elem[parent].left   = child_left;
  Q->H.elem[parent].right  = child_right;  
  
  Q->H.elem[child].parent = parent_parent;
  if (parent_left == child){
    Q->H.elem[child].left   = parent;
    Q->H.elem[child].right  = parent_right;
    Q->H.elem[parent_right].parent = child;
  }else{ /* parent_right == child */
    Q->H.elem[child].left   = parent_left;
    Q->H.elem[child].right  = parent;
    Q->H.elem[parent_left].parent = child;
  }

}

void MoveUpHeap(RGQueue *Q, int bucket, int elem)
{
   int parent = Q->H.elem[elem].parent;

   if (Q->C.removal_policy == MINVALUE)
   {
      while ((parent != NIL) && (Q->H.value[elem] < Q->H.value[parent]))
      {
         SwapParentChildInHeap(Q, bucket, parent, elem);
         parent = Q->H.elem[elem].parent;
      }
   }
   else /* removal_policy == MAXVALUE */
   {
      while ((parent != NIL) && (Q->H.value[elem] > Q->H.value[parent]))
      {
         SwapParentChildInHeap(Q, bucket, parent, elem);
         parent = Q->H.elem[elem].parent;
      }
   }
}

void MoveDownHeap(RGQueue *Q, int bucket, int elem)
{
  int left, right, child;

  left  = Q->H.elem[elem].left;
  right = Q->H.elem[elem].right;

  if (Q->C.removal_policy == MINVALUE){
    while (left != NIL){
      child = left;
      if ((right != NIL) && (Q->H.value[right] < Q->H.value[left]))
	child = right;
      if (Q->H.value[child] < Q->H.value[elem]){
	SwapParentChildInHeap(Q, bucket, elem, child);
	left  = Q->H.elem[elem].left;
	right = Q->H.elem[elem].right;
	printf("elem %d, left %d, right %d parent %d\n",elem,left,right,Q->H.elem[elem].parent);
 	if ((left == NIL)&&(right != NIL)){ /* fix heap */ 
	  Q->H.elem[elem].left    = right;
	  Q->H.elem[elem].right   = NIL;
	  left  = right;
	  right = NIL;
	}
	if ((left != NIL)&&(right==NIL)){ /* fix heap if necessary and
					     last pointer in the
					     curcular queue */
	  int parent =  Q->H.elem[elem].parent;
	  if (parent != NIL){
	    if (elem == Q->H.elem[parent].left){
	      int brother = Q->H.elem[parent].right;
	      if (Q->H.elem[brother].right != NIL){
		Q->H.elem[elem].right    = Q->H.elem[brother].right;
		Q->H.elem[brother].right = NIL;
		Q->C.last[bucket] = Q->H.elem[brother].left;
		Q->H.elem[Q->H.elem[elem].right].parent = elem;
	      }
	    } else { /* elem == Q->H.elem[parent].right */
	      Q->C.last[bucket] = left;
	    }
	  }   
	}
      }
      else break;
    }
  } else {
    while (left != NIL){
      child = left;
      if ((right != NIL) && (Q->H.value[right] > Q->H.value[left]))
	child = right;
      if (Q->H.value[child] > Q->H.value[elem]){
	SwapParentChildInHeap(Q, bucket, elem, child);
	left  = Q->H.elem[elem].left;
	right = Q->H.elem[elem].right;
 	if ((left == NIL)&&(right != NIL)){ /* fix heap */ 
	  Q->H.elem[elem].left    = right;
	  Q->H.elem[elem].right   = NIL;
	  left  = right;
	  right = NIL;
	}
	if ((left != NIL)&&(right==NIL)){ /* fix heap if necessary and
					     last pointer in the
					     curcular queue */
	  int parent =  Q->H.elem[elem].parent;
	  if (parent != NIL){
	    if (elem == Q->H.elem[parent].left){
	      int brother = Q->H.elem[parent].right;
	      if (Q->H.elem[brother].right != NIL){
		Q->H.elem[elem].right    = Q->H.elem[brother].right;
		Q->H.elem[brother].right = NIL;
		Q->C.last[bucket] = Q->H.elem[brother].left;
		Q->H.elem[Q->H.elem[elem].right].parent = elem;
	      }
	    } else { /* elem == Q->H.elem[parent].right */
	      Q->C.last[bucket] = left;
	    }
	  }   
	}
      }
      else break;
    }
  }
}

void InsertRGQueue(RGQueue *Q, int elem)
{
  int   bucket, last, parent;
  float minvalue=Q->C.minvalue;
  float maxvalue=Q->C.maxvalue;
  
  if (Q->H.elem[elem].color==GRAY)
    return; // due to possible duplicated seeds
  
  if (Q->H.value[elem] < minvalue)
    minvalue = Q->H.value[elem];
  if (Q->H.value[elem] > maxvalue)
    maxvalue = Q->H.value[elem];
  
  if ((int)(maxvalue-minvalue) >= (Q->C.nbuckets+1))
    {
      Error("Inserted value exceeds maximum range of queue.","InsertRGQueue");;
    }
  
  if (Q->C.removal_policy==MINVALUE)
    {
      bucket=((int)Q->H.value[elem])%Q->C.nbuckets;
    }
  else
    {
      bucket=Q->C.nbuckets-1-(((int)Q->H.value[elem])%Q->C.nbuckets);
    }
  
  Q->C.minvalue = minvalue;
  Q->C.maxvalue = maxvalue;
  
  Q->H.elem[elem].left   = NIL;
  Q->H.elem[elem].right  = NIL;
  Q->H.elem[elem].color  = GRAY;
  

  if (Q->C.first[bucket] == NIL) /* insertion at empty bucket */
    {
      Q->C.first[bucket]     = elem;
      Q->C.last[bucket]      = elem;
      Q->H.elem[elem].parent = NIL;
    }
  else /* bucket is not empty */
    {
      last                   = Q->C.last[bucket];
      parent                 = Q->H.elem[last].parent;
      if (parent == NIL) { /* insertion in heap with a single element */
	Q->H.elem[last].left    = elem;
	Q->H.elem[elem].parent  = last;
	Q->C.last[bucket]       = elem; 
      }else{
	if (Q->H.elem[parent].right == NIL){ /* insertion at the right
						of the last element */
	  Q->H.elem[parent].right = elem;
	  Q->H.elem[elem].parent  = parent;
	  int parent_parent       = Q->H.elem[parent].parent;
	  /* update last to keep the heap balanced */
	  if (parent_parent != NIL){
	    if (Q->H.elem[parent_parent].left == parent){ 
	      Q->C.last[bucket] = Q->H.elem[parent_parent].right;
	    }else{ /* Q->H.elem[parent_parent].right == parent */
	      int uncle = Q->H.elem[parent_parent].left;
	      Q->C.last[bucket] = Q->H.elem[uncle].left;
	    }
	  }
	}else{ /* the height of the heap increases with insertion at
		  the left of the last element */
	  Q->H.elem[last].left    = elem;
	  Q->H.elem[elem].parent  = last;
	  Q->C.last[bucket]       = elem; 
	}
      }      
      MoveUpHeap(Q, bucket, elem);
    }
}

int RemoveRGQueue(RGQueue *Q)
{
  int elem, last, current, parent;

    if (Q->C.removal_policy==MINVALUE)
        current=((int)Q->C.minvalue)%Q->C.nbuckets;
    else
        current=Q->C.nbuckets-1-(((int)Q->C.maxvalue)%Q->C.nbuckets);

    if (Q->C.first[current] == NIL)
    {
        last = current;

        current = (current + 1) % (Q->C.nbuckets);

        while ((Q->C.first[current] == NIL) && (current != last))
        {
            current = (current + 1) % (Q->C.nbuckets);
        }

        if (Q->C.first[current] != NIL)
        {
            if (Q->C.removal_policy==MINVALUE)
                Q->C.minvalue = Q->H.value[Q->C.first[current]];
            else
                Q->C.maxvalue = Q->H.value[Q->C.first[current]];
        }
        else
        {
            Error("RGQueue is empty\n","RemoveRGQueue");
        }
    }

    elem                  = Q->C.first[current];

    if (Q->C.last[current] == elem) { /* deletion at bucket with a
					 single element */
      Q->C.first[current] = Q->C.last[current] = NIL;
    }else{ /* deletion at bucket with more elements than one: put
	      either the last element or its right brother (whenever
	      it exists) at the top of the heap and move down. */

      last                   = Q->C.last[current]; 
      parent                 = Q->H.elem[last].parent;
      
      if (parent != NIL) { 
	if (Q->H.elem[parent].right == NIL){ /* move the last element
						to the top of the
						heap. */
	  Q->C.first[current]    = last;
	  Q->H.elem[last].parent = NIL;
	  Q->H.elem[last].left   =  Q->H.elem[elem].left;
	  Q->H.elem[last].right  =  Q->H.elem[elem].right;
	  if (Q->H.elem[elem].left != NIL){
	    int left_child = Q->H.elem[elem].left;
	    Q->H.elem[left_child].parent = last;
	  }
	  if (Q->H.elem[elem].right != NIL){
	    int right_child = Q->H.elem[elem].right;
	    Q->H.elem[right_child].parent = last;
	  }
	  Q->H.elem[parent].left = NIL;
	  Q->C.last[current]     = parent;
	  MoveDownHeap(Q, current, last);
	}else{ /* move the right brother to the top of the heap. */
	  int right_brother = Q->H.elem[parent].right;

	  Q->C.first[current]             = right_brother;
	  Q->H.elem[right_brother].parent = NIL;
	  Q->H.elem[right_brother].left   =  Q->H.elem[elem].left;
	  Q->H.elem[right_brother].right  =  Q->H.elem[elem].right;
	  if (Q->H.elem[elem].left != NIL){
	    int left_child = Q->H.elem[elem].left;
	    Q->H.elem[left_child].parent = right_brother;
	  }
	  if (Q->H.elem[elem].right != NIL){
	    int right_child = Q->H.elem[elem].right;
	    Q->H.elem[right_child].parent = right_brother;
	  }
	  Q->H.elem[parent].right = NIL;
	  MoveDownHeap(Q, current, right_brother);
	}
      }else{ /* bucket will remain with a single element */
	Q->C.first[current] = last;
      }
    }
    
    Q->H.elem[elem].parent = NIL;
    Q->H.elem[elem].left   = NIL;
    Q->H.elem[elem].right  = NIL;
    Q->H.elem[elem].color  = BLACK;

    return elem;
}

void UpdateRGQueueElem(RGQueue *Q, int elem, float value){
  int bucket;

  Q->H.value[elem] = value;

  if (Q->H.elem[elem].color == BLACK) {
    Error("Element has been removed","UpdateRGQueueElem");
  }

  if(Q->H.elem[elem].color == WHITE)
    InsertRGQueue(Q, elem);
  else{
    if (Q->C.removal_policy==MINVALUE)
    {
        bucket=((int)Q->H.value[elem])%Q->C.nbuckets;
    }
    else
    {
        bucket=Q->C.nbuckets-1-(((int)Q->H.value[elem])%Q->C.nbuckets);
    }
    MoveUpHeap(Q, bucket, elem);
  }

}


int EmptyRGQueue(RGQueue *Q)
{
    int last, current;

    if (Q->C.removal_policy==MINVALUE)
        current=((int)Q->C.minvalue)%Q->C.nbuckets;
    else
        current=Q->C.nbuckets-1-(((int)Q->C.maxvalue)%Q->C.nbuckets);

    if (Q->C.first[current] != NIL)
        return 0;

    last = current;

    current = (current + 1) % (Q->C.nbuckets);

    while ((Q->C.first[current] == NIL) && (current != last))
    {
        current = (current + 1) % (Q->C.nbuckets);
    }

    if (Q->C.first[current] == NIL)
    {
        return(1);
    }

    return (0);
}

void PrintHeap(RGQueue *Q, int elem)
{
  if (elem != NIL) {
    printf("pixel %d cost %f parent %d left %d right %d\n",elem,Q->H.value[elem],Q->H.elem[elem].parent,Q->H.elem[elem].left,Q->H.elem[elem].right);
    PrintHeap(Q,Q->H.elem[elem].left);
    PrintHeap(Q,Q->H.elem[elem].right);
  }
}
